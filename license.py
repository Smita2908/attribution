import pandas as pd
import os
import sys, getopt

htmlhead = '''
<!-- Generated by licenses.py; do not edit. -->
<!doctype html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width">
<meta name="color-scheme" content="light dark">
<title> Credits </title>
'''


style = '''
<style>
    html {
      --s-blue-50: rgb(229, 230, 241);
      --s-blue-300: rgb(108, 161, 247);
      --s-blue-600: rgb(46, 112, 199);
      --s-blue-900: rgb(23, 78, 166);
      --s-grey-200: rgb(232, 234, 237);
      --s-grey-800: rgb(60, 64, 67);
      --s-grey-900: rgb(32, 33, 36);
    
      --interactive-color: var(--s-blue-600);
      --primary-color: var(--s-grey-900);
    
      --product-background: var(--s-blue-50);
      --product-text-color: var(--s-blue-900);
    
      background: white;
    }
    
    @media (prefers-color-scheme: dark) {
      html {
        --interactive-color: var(--s-blue-300);
        --primary-color: var(--s-grey-200);
    
        --product-background: var(--s-grey-800);
        --product-text-color: var(--s-grey-200);
    
        background: var(--s-grey-900);
      }
    }
    
    body {
      color: var(--primary-color);
      font-size: 84%;
      max-width: 1020px;
    }
    a {
      color: var(--interactive-color);
    }
    .page-title {
      font-size: 164%;
      font-weight: bold;
    }
    .product {
      background-color: var(--product-background);
      color: var(--product-text-color);
      border-radius: 5px;
      margin-top: 16px;
      overflow: auto;
      padding: 2px;
    }
    .product .title {
      float: left;
      font-size: 110%;
      font-weight: bold;
      margin: 3px;
    }
    .product .homepage {
      color: var(--interactive-color);
      float: right;
      margin: 3px;
      text-align: right;
    }
    .product .homepage::before {
      content: " - ";
    }
    .product .show {
      color: var(--interactive-color);
      float: right;
      margin: 3px;
      text-align: right;
      text-decoration: underline;
    }
    .licence {
      border-radius: 3px;
      clear: both;
      display: none;
      padding: 16px;
    }
    .licence h3 {
      margin-top: 0;
    }
    .licence pre {
      white-space: pre-wrap;
    }
    .dialog #print-link,
    .dialog .homepage {
      display: none;
    }
    input + label + div {
      display: none;
    }
    input + label::before {
      content: "";
      cursor: pointer;
    }
    input:checked + label + div {
      display: block;
    }
    input:checked + label::before {
      content: "hide ";
      cursor: pointer;
    }
    </style>
    '''

closehead = f"</head>"
openbody = f"<body>"

def maplictext(licnames):
    files = []
    if ('GNU General Public License v1.0' in licnames ):
        files.append('gplv1.0.txt')
    if ('GNU General Public License v2.0' in licnames ):
        files.append('gplv2.0.txt')
    if ('GNU General Public License v3.0' in licnames ):
        files.append('gplv3.0.txt')
    if ('GNU Lesser General Public License v2.1' in licnames ):
        files.append('lgplv3.0.txt')
    if ('GNU Lesser General Public License v3.0' in licnames ):
        files.append('lgplv3.0.txt')
    if ('BSD 3-clause' in licnames):
        files.append('BSD-3-clause.txt')
    if ('Apache License 2.0' in licnames):
        files.append('apache2.0.txt')
    if ('MIT License' in licnames):
        files.append('mit.txt')
    if ('Eclipse Public License 1.0' in licnames):
        files.append('eplv1.0.txt')
    if ('Eclipse Public License 2.0' in licnames):
        files.append('eplv2.0.txt')
    if ('Common Development and Distribution License 1.1' in licnames):
        files.append('cddlv1.0.txt')
    if ('Common Development and Distribution License 2' in licnames):
        files.append('cddlv2.0.txt')
    if ('Mozilla' in licnames):
        files.append('mplv2.0.txt')
    if ('NVIDIA CUDA Toolkit' in licnames):
        files.append('NVIDIA-Cuda.txt')
    if ('PostgreSQL License' in licnames):
        files.append('PostgreSQL.txt')
    if ('PCRE' in licnames):
        files.append('pcre.txt')
    if ('curl' in licnames):
        files.append('curl.txt')
    if ('OpenSSL License' in licnames):
        files.append('openssl.txt')   
    if ('ANTLR' in licnames):
        files.append('antlr.txt')       
    if ('W3C' in licnames):
        files.append('w3c.txt')
    if ('BSD 4-' in licnames):
        files.append('BSD4-Clause.txt')
    if ('dom4j' in licnames):
        files.append('dom4j.txt')
    if (('zlib' in licnames) or ('libpng' in licnames)):
        files.append('zlib.txt')
    if ('Creative Common' in licnames):
        files.append('cc2.5.txt')
    if ('Classpath Exception' in licnames):
        files.append('gplv2.0.txt')
    if ('Open Market' in licnames):
        files.append('oml.txt')
    if ('Christian Michelsen' in licnames):
        files.append('cmr.txt')
    if ('Bind' in licnames):
        files.append('mplv2.0.txt')
    if ('Oracle Binary' in licnames):
        files.append('obcl.txt')
    if ('Sun Binary' in licnames):
        files.append('sbcl.txt')
    if ('JAVA Research' in licnames):
        files.append('jrl.txt')

    print (files)
    lictext = ""
    for f in files: 
        with open (f, 'r') as fd:
            lictext = lictext + fd.read()
    
    return lictext

    
class Homepage(object):
    def get_repo(self, name, id):
        if ('unknown' in name):
            id = 'Invalid'
        name_str = name.split()
        id_str = id.split()
        i = 0
        url = ""
        for s in id_str: 
            self.id = s.replace(",","")
            method_name='component_' + name_str[i].replace(",","")
            i = i + 1
            method=getattr(self,method_name,lambda :'Invalid')
            url = url + ' ' + method()
        return url
    def component_maven(self):
        s = self.id.replace(":","/")
        url = "https://mvnrepository.com/artifact/" + s
        return url
    def component_github(self):
        s = self.id.split(':')
        url = "https://github.com/" + s[0]
        return url
    def component_ubuntu(self):
        s = self.id
        url = "https://launchpad.net/ubuntu/+source/" + s
        return url
    def component_debian(self):
        s = self.id
        url = "https://launchpad.net/debian/+source/" + s
        return url


#Build one lic 

def buildlicrow (component, index, lictext, repolink, version):
    row = ""
    rindex = 1000+index
    vindex = 2000+index
    hdr = f'''
    <div style="clear:both; overflow:auto;">
    <div class="product">
    <span class="title">{component}</span>

    <!--span class="homepage"><a href = {repolink}>homepage</a></span-->
    
    '''
    homepage =f'''
    <input type="checkbox" hidden id="{rindex}">
    <label class="show" for="{rindex}" tabindex={index}>source code</label>
    <div class = "licence">
    <pre>
    '''
=
    '''
    links = repolink.split()
    
    for link in links:
        print(link)   
        homepage = homepage + f"""<span class="homepage"><a href = {link}>source code</a></span>"""
        print(homepage) 
    '''
    lic = f'''
    <!--/pre-->
    </div>
    <input type="checkbox" hidden id="{index}">
    <label class="show" for="{index}" tabindex={index}>license</label>
    <div class="licence">
    
    <!--pre-->
    ''' There are few components that use Apache license 1.1. Can we show Apache license 2.0 for them
        f.write (closehead)
        f.write (openbody)
        h2 = f"<h2> Credits - {productname} </h2>"
        f.write (h2)

        for ind in nds.index:
            row = buildlicrow (nds['Component name'][ind], ind, maplictext(nds['License names'][ind]), homepage.get_repo(nds['Origin name'][ind], nds['Origin id'][ind]), nds['Component version name'][ind])
            f.write (row)
        
        f.write (close)

def main(argv):
   inputfile = 'components.csv'
   outputfile = 'credits.html'
   productname = 'Myproduct'
   try:
      opts, args = getopt.getopt(argv,"h:i:p:o:",["ifile=","ofile="]) 
   except getopt.GetoptError:
      print ('license.py -i <inputfile> -o <outputfile> -p <product name>')
      sys.exit(2)
   for opt, arg in opts:
      if opt == '-h':
         print ('license.py -p <prodname> -i <inputfile> -o <outputfile> -p <product name>')
         sys.exit()
      elif opt in ("-p", "--product"):
          productname = arg
      elif opt in ("-i", "--ifile"):
         inputfile = arg
      elif opt in ("-o", "--ofile"):
         outputfile = arg

   outhtml(inputfile, outputfile, productname)

if __name__ == "__main__":
   main(sys.argv[1:])
